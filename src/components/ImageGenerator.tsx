
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
// import { Input } from '@/components/ui/input'; // Input not directly used for main prompt textarea
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Image, Wand2, Download, RefreshCw, Copy } from 'lucide-react'; // Added Copy icon
// import { useToast } from '@/hooks/use-toast'; // Will use sonner
import { toast as sonnerToast } from 'sonner';
import { useMutation } from '@tanstack/react-query';
import { generateImagePromptForText, GeminiServiceError } from '@/lib/geminiService';

const ImageGenerator = () => {
  const [textInput, setTextInput] = useState(''); // User's initial text
  const [generatedImagePrompt, setGeneratedImagePrompt] = useState(''); // For the prompt generated by Gemini

  // These states remain for UI, but are not used by generateImagePromptForText
  const [style, setStyle] = useState('');
  const [aspectRatio, setAspectRatio] = useState('');
  const [quality, setQuality] = useState('');

  // This state is no longer for image URLs, but for storing the generated text prompt
  // const [generatedImages, setGeneratedImages] = useState([]); // To be replaced or removed
  // const [isGenerating, setIsGenerating] = useState(false); // Will use mutation.isPending

  const promptGenerationMutation = useMutation<
    string, // Expecting a string (the generated prompt)
    GeminiServiceError,
    string // Input is the textInput string
  >({
    mutationFn: async (currentTextInput) => {
      if (!currentTextInput.trim()) {
        throw new Error("Input text cannot be empty.");
      }
      return generateImagePromptForText(currentTextInput);
    },
    onMutate: () => {
      setGeneratedImagePrompt('');
      sonnerToast.info("Generating image prompt...");
    },
    onSuccess: (data) => {
      setGeneratedImagePrompt(data);
      sonnerToast.success("Image prompt generated successfully!");
    },
    onError: (error: GeminiServiceError) => {
      console.error("Error generating image prompt:", error);
      if (error.isApiKeyInvalid) {
        sonnerToast.error("API Key is invalid or missing. Please check plugin settings.");
      } else {
        sonnerToast.error(`Error: ${error.message}`);
      }
    }
  });

  const handleGeneratePrompt = () => {
    if (!textInput.trim()) {
      sonnerToast.error("Please enter some text to generate an image prompt from.");
      return;
    }
    promptGenerationMutation.mutate(textInput);
  };

  // downloadImage and related generatedImages logic will be removed or adapted
  // For now, let's focus on generating and displaying the prompt.
  const copyGeneratedPrompt = () => {
    if (!generatedImagePrompt) return;
    navigator.clipboard.writeText(generatedImagePrompt)
      .then(() => sonnerToast.success("Prompt copied to clipboard!"))
      .catch(err => sonnerToast.error("Failed to copy prompt."));
  };

  // This function is for downloading actual images, which we are not generating yet.
  // It can be removed or kept if there's a plan to integrate actual image generation later.
  const downloadImage = async (imageUrl, fileName) => {
    try {
      const response = await fetch(imageUrl);
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = fileName || 'generated-image.jpg';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
      
      toast({
        title: "Image Downloaded",
        description: "Image has been saved to your device.",
      });
    } catch (error) {
      toast({
        title: "Download Failed",
        description: "Could not download the image. Please try again.",
        variant: "destructive"
      });
    }
  };

  return (
    <div className="space-y-6">
      {/* Generator Settings */}
      <Card className="bg-white/70 backdrop-blur-sm border-0 shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Wand2 className="h-5 w-5 text-pink-600" />
            Flux Image Generator
          </CardTitle>
          <CardDescription>
            Generate high-quality images for your blog posts and content
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid gap-6 md:grid-cols-2">
            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="text-input">Your Text for Prompt Generation *</Label>
                <Textarea
                  id="text-input"
                  placeholder="Enter text based on which you want to generate an image prompt... e.g., 'A blog post about sustainable gardening techniques for urban environments.'"
                  value={textInput}
                  onChange={(e) => setTextInput(e.target.value)}
                  rows={4}
                />
              </div>

              <div className="space-y-2">
                <Label>Style</Label>
                <Select value={style} onValueChange={setStyle}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select image style" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="photorealistic">Photorealistic</SelectItem>
                    <SelectItem value="illustration">Illustration</SelectItem>
                    <SelectItem value="digital-art">Digital Art</SelectItem>
                    <SelectItem value="minimalist">Minimalist</SelectItem>
                    <SelectItem value="vintage">Vintage</SelectItem>
                    <SelectItem value="modern">Modern</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="space-y-4">
              <div className="space-y-2">
                <Label>Aspect Ratio</Label>
                <Select value={aspectRatio} onValueChange={setAspectRatio}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select aspect ratio" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="1:1">Square (1:1)</SelectItem>
                    <SelectItem value="16:9">Landscape (16:9)</SelectItem>
                    <SelectItem value="9:16">Portrait (9:16)</SelectItem>
                    <SelectItem value="4:3">Standard (4:3)</SelectItem>
                    <SelectItem value="3:2">Classic (3:2)</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label>Quality</Label>
                <Select value={quality} onValueChange={setQuality}>
                  <SelectTrigger>
                    <SelectValue placeholder="Select quality" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="standard">Standard</SelectItem>
                    <SelectItem value="high">High Quality</SelectItem>
                    <SelectItem value="ultra">Ultra HD</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label>Features</Label>
                <div className="flex flex-wrap gap-2">
                  <Badge variant="secondary" className="bg-pink-100 text-pink-700">
                    Flux AI Model
                  </Badge>
                  <Badge variant="secondary" className="bg-blue-100 text-blue-700">
                    High Resolution
                  </Badge>
                  <Badge variant="secondary" className="bg-green-100 text-green-700">
                    Commercial Use
                  </Badge>
                </div>
              </div>
            </div>
          </div>

          <Button 
            onClick={handleGeneratePrompt}
            className="w-full mt-6 bg-gradient-to-r from-pink-600 to-purple-600 hover:from-pink-700 hover:to-purple-700"
            disabled={promptGenerationMutation.isPending}
          >
            {promptGenerationMutation.isPending ? (
              <>
                <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                Generating Prompt...
              </>
            ) : (
              <>
                <Wand2 className="h-4 w-4 mr-2" /> {/* Changed Icon */}
                Generate Image Prompt
              </>
            )}
          </Button>
        </CardContent>
      </Card>

      {/* Generated Image Prompt Display */}
      {generatedImagePrompt && (
        <Card className="bg-white/70 backdrop-blur-sm border-0 shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Image className="h-5 w-5 text-green-600" />
              Generated Image Prompt
            </CardTitle>
            <CardDescription>
              Use this prompt with your favorite image generation tool.
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <Textarea
              value={generatedImagePrompt}
              readOnly
              rows={5}
              className="bg-slate-50"
            />
            <Button onClick={copyGeneratedPrompt} variant="outline" size="sm">
              <Copy className="h-4 w-4 mr-2" />
              Copy Prompt
            </Button>
          </CardContent>
        </Card>
      )}

      {/* No Prompt State */}
      {!generatedImagePrompt && !promptGenerationMutation.isPending && (
        <Card className="bg-white/70 backdrop-blur-sm border-0 shadow-lg">
          <CardContent className="text-center py-12">
            <Wand2 className="h-16 w-16 mx-auto mb-4 text-gray-300" />
            <h3 className="text-lg font-semibold text-gray-700 mb-2">No Image Prompt Generated Yet</h3>
            <p className="text-gray-500">Enter some text above and click "Generate Image Prompt" to create a detailed prompt for image generation tools.</p>
          </CardContent>
        </Card>
      )}
    </div>
  );
};

export default ImageGenerator;
